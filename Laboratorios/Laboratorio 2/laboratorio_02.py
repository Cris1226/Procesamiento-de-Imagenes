# -*- coding: utf-8 -*-
"""Laboratorio_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kA4th1o-7u780wVww83PQ6kJTTxKkgrI

Librerías
"""

import numpy as np                  ## Se usa para el manejo de arrays
import matplotlib.pyplot as plt     ## Se usa para visualizar gráficos
import pylab as pl
import time
from IPython import display
from IPython.display import Audio
plt.style.use(['dark_background'])  ## Se usa para gráficas de temas oscuros

!pip install pysoundfile
!pip install bitstring

##!wget -nc https://github.com/Cris1226/Procesamiento-de-Imagenes/blob/main/LAB2/los_hombres.wav
!wget -nc los_hombres.wav

import IPython
Audio("los_hombres.wav")

import soundfile

audio_signal, fm = soundfile.read('los_hombres.wav')
audio=audio_signal[:, 0]
plt.figure(figsize=(6,10))
plt.subplot(211)
plt.plot(audio)
plt.title('Audio')

plt.subplot(212)
plt.plot(audio[20000:240000], marker='x')
plt.title('Mostrar rango 20000-240000')

print(f'Tasa de muestreo: {fm} muestreo/segundo')
print(f'Tamaño de señal: {audio.shape[0]} muestras')

"""### **CREACIÓN DEL KERNEL**"""

kernel = np.exp(-np.linspace(-2,2,50)**2)
kernel = kernel/sum(kernel)

"""### **Mostrando señales creadas**"""

plt.figure(figsize=(10,8))

plt.subplot(211)
plt.plot( audio,'b')
plt.xlim([0,len(audio)])
plt.grid()

plt.subplot(212)
plt.plot(kernel,'r')
plt.xlim([0,len(kernel)])
plt.title('Kernel')
plt.grid()

plt.show()

""" * **Cálculo y gráfica de la convolución**"""

convolucion=np.convolve(audio,kernel)

plt.figure(figsize=(15,3))
plt.plot(convolucion,"r", linewidth=3)
plt.xlim([0,len(audio)])
plt.grid()
plt.show()

soundfile.write('los_hombres_original.wav', audio_signal, fm)
soundfile.write('los_hombres_convolve.wav', convolucion, fm)
IPython.display.Audio('los_hombres_convolve.wav')

IPython.display.Audio('los_hombres_original.wav')

plt.figure(figsize=(10,4))
plt.plot(audio_signal,'r',linewidth=6)
plt.plot(convolucion,'ws')
plt.xlim(17000, 20000)
plt.show()

""" * **Cálculo y gráfica de la correlacion**"""

correlacion=np.correlate(audio,kernel)

plt.figure(figsize=(15,3))
plt.plot(correlacion,"r", linewidth=3)
plt.xlim([0,len(audio)])
plt.grid(True)
#plt.plot(x_n)
plt.show()

soundfile.write('los_hombres_correlate.wav', correlacion, fm)
IPython.display.Audio('los_hombres_correlate.wav')

IPython.display.Audio('los_hombres_original.wav')

plt.figure(figsize=(15,4))
plt.plot(audio_signal,'r',linewidth=6)
plt.plot(correlacion,'ws')

# Establece los límites del eje x
plt.xlim(18000, 22000)

# Muestra la gráfica
plt.show()